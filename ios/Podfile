require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")
require File.join(File.dirname(`node --print "require.resolve('@react-native-community/cli-platform-ios/package.json')"`), "native_modules")

platform :ios, '12.0'

require 'json'
podfile_properties = JSON.parse(File.read('./Podfile.properties.json')) rescue {}

target 'myshopping' do
  use_expo_modules!
  config = use_native_modules!

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == 'hermes'
  )

  # Uncomment to opt-in to using Flipper
  #
  # if !ENV['CI']
  #   use_flipper!('Flipper' => '0.75.1', 'Flipper-Folly' => '2.5.3', 'Flipper-RSocket' => '1.3.1')
  # end

  post_integrate do |installer|
    update_pod_build_phase_order("./Pods/Pods.xcodeproj", "ExpoModulesCore")
  end

  def update_pod_build_phase_order(xcodeproj_path, target_name)
    puts "Updating build phase order of 'Headers' in #{xcodeproj_path}, #{target_name} \n"
    project = Xcodeproj::Project.open(xcodeproj_path)
    target = project.targets.select { |t| t.name == target_name }.first
    puts "Found target: #{target.name}\n"
    cocoapods_index = target.build_phases.index do |b|
      puts "#{b} , #{b == "HeadersBuildPhase"}"
      b.to_s == "HeadersBuildPhase"
    end
    if cocoapods_index.nil? == false
        puts "#{target_name}: 'HeadersBuildPhase' index was: #{cocoapods_index}, moving to index 1.\n"
        target.build_phases.move_from(cocoapods_index, 1)
    end
    project.save
  end

  post_install do |installer|
    react_native_post_install(installer)

    # Workaround `Cycle inside FBReactNativeSpec` error for react-native 0.64
    # Reference: https://github.com/software-mansion/react-native-screens/issues/842#issuecomment-812543933
    installer.pods_project.targets.each do |target|
      if (target.name&.eql?('FBReactNativeSpec'))
        target.build_phases.each do |build_phase|
          if (build_phase.respond_to?(:name) && build_phase.name.eql?('[CP-User] Generate Specs'))
            target.build_phases.move(build_phase, 0)
          end
        end
      end
    end
  end

end
